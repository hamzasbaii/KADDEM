pipeline{
    agent any
    stages {
        stage("Testing Maven"){
            steps {
                sh "mvn -version"
            }
        }
        stage("Testing JDK"){
            steps {
                sh "java -version"
            }
        }
        stage("Chekout Git"){
            steps {
                echo "Pulling"
            }
        }
        stage('MVN COMPILE') {
            steps{
                sh 'mvn compile'
        }
}
stage("test JUinit"){
            steps {
                sh'mvn clean test'
                sh "mvn test"
            }
        }
stage('JaCoCo Report') {
            steps {
                sh 'mvn jacoco:report'
            }
        }
stage('MVN SONARQUBE') {
            steps{

                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar'
            }
        }
      stage('MVN Nexus') {
            steps{
                sh 'mvn deploy -Dmaven.test.skip=true'
        }
}
stage('Docker Image ') {
            steps{
                sh 'docker build -t hamzasbaii/devops-project-2.1 .'
        }
}
    stage('Docker HUB') {
            steps{
                sh ' docker login -u hamzasbaii -p Hamza060200'
                sh ' docker push hamzasbaii/devops-project-2.1'
        }
}
   stage('Run Docker Compose') {
steps {
               echo "Running Docker Compose"
sh 'docker-compose up -d'
}
}
stage('Monitoring with Prometheus and Grafana') {
environment {
GRAFANA_URL = "http://admin:admin@192.168.1.110:3000" \
}
steps {
echo "Monitoring with Prometheus and Grafana" 

script {
def dataSourceExists = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${GRAFANA_URL}/api/datasources/name/Prometheus", returnStatus: true) == 200

if (!dataSourceExists) {
echo "Prometheus data source does not exist in Grafana. Creating..."
sh "curl -X POST -H 'Content-Type: application/json' -d '{\"name\":\"Prometheus1\",\"type\":\"prometheus\",\"url\":\"http://192.168.1.110:9090 \
\",\"access\":\"proxy\"}' ${GRAFANA_URL}/api/datasources"
} else {
echo "Prometheus data source already exists in Grafana"
}
}

// Import Grafana dashboard for Spring Boot Actuator metrics (customize the URL)
sh 'curl -X POST -H "Content-Type: application/json" -d "{\"dashboard\": \"https://grafana.com/dashboards/6756/revisions/2/download \
\",\"inputs\": [{\"name\": \"DS_PROMETHEUS\", \"type\": \"datasource\", \"pluginId\": \"prometheus\", \"value\": \"Prometheus\"}] }"\
${GRAFANA_URL}/dashboards/import'
}
}

    }
post {
    always {
        emailext(
                subject: "Pipline Status: ${BUILD_NUMBER}",
                body: '''<html>
                            <body>
                                    <p>Build Status: ${BUILD_STATUS}</p>
                                    <p>Build number: ${BUILD_NUMBER}</p>
                                    <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                            </body>    
                        </html>''',
                to:'sbaih238@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType:'text/html'
)
}
}
                                    
}

